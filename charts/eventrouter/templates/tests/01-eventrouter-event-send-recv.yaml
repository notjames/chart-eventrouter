---
apiVersion: v1
kind: Pod
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: {{ template "namewithversion" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  annotations:
    "helm.sh/hook": test-success
spec:
  initContainers:
    - name: test-framework
      image: dduportal/bats:0.4.0
      command:
      - "bash"
      - "-c"
      - |
        set -ex
        # copy bats to tools dir
        cp -R /usr/local/libexec/ /tools/bats/
      volumeMounts:
      - mountPath: /tools
        name: tools
  containers:
    - name: {{ .Release.Name }}-test
      image: {{ .Values.test.image }}:{{ .Values.test.tag }}
      command: ["/tools/bats/bats", "-t", "/tests/run.sh"]
      volumeMounts:
      - mountPath: /tests
        name: tests
        readOnly: false
      - mountPath: /tools
        name: tools
      - mountPath: /tests/tests.yaml
        name: tests
        subPath: tests.yaml
  volumes:
  - name: tests
    configMap:
      name: {{ template "fullname" . }}
  - name: tools
    emptyDir: {}
  restartPolicy: Never

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: {{template "namewithversion" .}}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
data:
  run.sh: |

    RETRY_CNT=12
    RETRY_DLY=1
    RETRY_MAX_TIME=60
    CNCT_TIMEOUT=5
    KUBEAPI_URL="https://kubernetes.default.svc/api/v1/namespaces/{{ .Release.Namespace }}/events"
    CACERT_FILE="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    TOKEN="$(< /var/run/secrets/kubernetes.io/serviceaccount/token)"
    TEST_TMPL="/var/tmp/tests/templates/tests.tpl"
    TEST_YAML="/var/tmp/tests/yaml/tests.yaml"
    TIMENOW=$(date +%Y%m%dT%H%M%S)

    export TIMENOW

    # test 1
    @test "Create VALID test YAML from template" {
      # /tests in $TEST_YAML is using the volumeMounts path
      # from the containers spec

      run envsubst < $TEST_TMPL > $TEST_YAML
      [[ ! -s $TEST_YAML ]]

      TEST_MSG="$(grep 'message: "' $TEST_YAML | cut -d : -f 3- | tr -d '"')"

      run bash -c "echo $TEST_MSG | grep -c \$TIMENOW"
      [[ $result != 1 ]]
    }

    # test 2
    @test "Test SEND event to EventRouter Service" {
      export TIMENOW
      envsubst < $TEST_YAML

      curl --connect-timeout $CNCT_TIMEOUT   \
           --silent                          \
           --retry $RETRY_CNT                \
           --retry-delay $RETRY_DLY          \
           --retry-max-time  $RETRY_MAX_TIME \
           --cacert $CACERT_FILE --header "Authorization: Bearer $TOKEN" \
           -X POST $KUBEAPI_URL @$TESTS_YAML
    }

    # test 3
    @test "Test VERIFY event to EventRouter Service RECVd" {
      run curl --connect-timeout $CNCT_TIMEOUT   \
               --silent                          \
               --retry $RETRY_CNT                \
               --retry-delay $RETRY_DLY          \
               --retry-max-time  $RETRY_MAX_TIME \
               --cacert $CACERT_FILE --header "Authorization: Bearer $TOKEN" \
               -X GET $KUBEAPI_URL | jq -c -M '.items[].message')

      echo $output
      [[ $output == $TEST_MSG ]]
    }
